/*1. Kroz SQL kod, napraviti bazu podataka koja nosi ime vašeg broja dosijea. 
U postupku kreiranja u obzir uzeti
samo DEFAULT postavke.
Unutar svoje baze podataka kreirati tabele sa sljedećom strukturom:
a) Klijenti
i. KlijentID, automatski generator vrijednosti i primarni ključ
ii. Ime, polje za unos 30 UNICODE karaktera (obavezan unos)
iii. Prezime, polje za unos 30 UNICODE karaktera (obavezan unos)
iv. Telefon, polje za unos 20 UNICODE karaktera (obavezan unos)
v. Mail, polje za unos 50 UNICODE karaktera (obavezan unos), jedinstvena vrijednost
vi. BrojRacuna, polje za unos 15 UNICODE karaktera (obavezan unos)
vii. KorisnickoIme, polje za unos 20 UNICODE karaktera (obavezan unos)
viii. Lozinka, polje za unos 20 UNICODE karaktera (obavezan unos)
b) Transakcije
i. TransakcijaID, automatski generator vrijednosti i primarni ključ
ii. Datum, polje za unos datuma i vremena (obavezan unos)
iii. TipTransakcije, polje za unos 30 UNICODE karaktera (obavezan unos)
iv. PosiljalacID, referenca na tabelu Klijenti (obavezan unos)
v. PrimalacID, referenca na tabelu Klijenti (obavezan unos)
vi. Svrha, polje za unos 50 UNICODE karaktera (obavezan unos)
vii. Iznos, polje za unos decimalnog broja (obavezan unos)
10 bodova
*/

CREATE DATABASE BrojIndeksa 
USE BrojIndeksa
GO

CREATE TABLE Klijenti(
	KlijentID INT CONSTRAINT PK_Klijenti PRIMARY KEY(KlijentID) IDENTITY(1,1),
	Ime NVARCHAR(30) NOT NULL,
	Prezime NVARCHAR(30) NOT NULL,
	Telefon NVARCHAR(20) NOT NULL,
	Mail NVARCHAR(50) NOT NULL CONSTRAINT UQ_Mail UNIQUE,
	BrojRacuna NVARCHAR(15) NOT NULL,
	KorisnickoIme NVARCHAR(20) NOT NULL,
	Lozinka NVARCHAR(20) NOT NULL
)

CREATE TABLE Transakcije(
	TransakcijaID INT CONSTRAINT PK_Transakcije PRIMARY KEY(TransakcijaID) IDENTITY(1,1),
	Datum DATETIME NOT NULL,
	TipTransakcije NVARCHAR(30) NOT NULL,
	PosaljilacID INT,
	PrimalacID INT,
	Svrha NVARCHAR(50) NOT NULL,
	Iznos DECIMAL(18,2) NOT NULL,
	CONSTRAINT FK_Transakcije_Posiljalac FOREIGN KEY(PosaljilacID)
	REFERENCES Klijenti(KlijentID),
	CONSTRAINT FK_Transakcije_Primalac FOREIGN KEY(PrimalacID)
	REFERENCES Klijenti(KlijentID)
)



/*2. Popunjavanje tabela podacima:
a) Koristeći bazu podataka AdventureWorks2014, preko INSERT i SELECT komande 
importovati 10 kupaca
u tabelu Klijenti. Ime, prezime, telefon, mail i broj računa (AccountNumber)
 preuzeti od kupca,
korisničko ime generisati na osnovu imena i prezimena u formatu ime.prezime, 
a lozinku generisati na
osnovu polja PasswordHash, i to uzeti samo zadnjih 8 karaktera.
b) Putem jedne INSERT komande u tabelu Transakcije dodati minimalno 10 transakcija.
10 bodova*/
/*a)*/
USE AdventureWorks2014
GO
INSERT INTO BrojIndeksa.dbo.Klijenti(Ime, Prezime, Telefon, Mail, BrojRacuna, 
		KorisnickoIme, Lozinka)

SELECT TOP 10 P.FirstName, P.LastName, PP.PhoneNumber, EA.EmailAddress, C.AccountNumber, 
	P.FirstName+'.'+P.LastName, RIGHT(PS.PasswordHash, 8) 
FROM Sales.Customer C
INNER JOIN Person.Person P
	ON C.PersonID = P.BusinessEntityID
INNER JOIN Person.EmailAddress EA
	ON P.BusinessEntityID = EA.BusinessEntityID
INNER JOIN Person.PersonPhone PP
	ON PP.BusinessEntityID = P.BusinessEntityID
INNER JOIN Person.Password PS
	ON PS.BusinessEntityID = P.BusinessEntityID
/*b)*/
USE BrojIndeksa
GO

INSERT INTO Transakcije(Datum, TipTransakcije, PosaljilacID, PrimalacID, Svrha, Iznos)
VALUES(GETDATE(), 'Tip1', 1, 2, 'Trgovina', 40), 
	(GETDATE(), 'Tip2', 1, 3, 'Trgovina', 40), 
	(GETDATE(), 'Tip3', 1, 4, 'Trgovina', 40), 
	(GETDATE(), 'Tip1', 2, 2, 'Trgovina', 40), 
	(GETDATE(), 'Tip2', 2, 3, 'Trgovina', 40), 
	(GETDATE(), 'Tip3', 2, 4, 'Trgovina', 40), 
	(GETDATE(), 'Tip1', 3, 1, 'Kupovina', 40), 
	(GETDATE(), 'Tip2', 3, 2, 'Kupovina', 40), 
	(GETDATE(), 'Tip3', 3, 3, 'Kupovina', 40), 
	(GETDATE(), 'Tip1', 4, 1, 'Kupovina', 40)

/*3. Kreiranje indeksa u bazi podataka nada tabelama:
a) Non-clustered indeks nad tabelom Klijenti. 
Potrebno je indeksirati Ime i Prezime. Također, potrebno je
uključiti kolonu BrojRacuna.
b) Napisati proizvoljni upit nad tabelom Klijenti koji u potpunosti 
iskorištava indeks iz prethodnog koraka.
Upit obavezno mora imati filter.
c) Uraditi disable indeksa iz koraka a)
5 bodova*/

/*a)*/
CREATE NONCLUSTERED INDEX IX_Klijenti
ON Klijenti (Ime, Prezime)
INCLUDE(BrojRacuna)
/*b)*/
SELECT Ime, Prezime, BrojRacuna
FROM Klijenti
WHERE Ime LIKE '[A]%'
/*c)*/
ALTER INDEX IX_Klijenti ON Klijenti
DISABLE

/*4. Kreirati uskladištenu proceduru koja će vršiti upis novih klijenata. 
Kao parametre proslijediti sva polja. Provjeriti
ispravnost kreirane procedure.
10 bodova*/

CREATE PROCEDURE proc_Upis(
	@Ime NVARCHAR(50), 
	@Prezime NVARCHAR(50), 
	@Telefon NVARCHAR(25), 
	@Mail NVARCHAR(50), 
	@BrojRacuna NVARCHAR(15), 
	@KorisnickoIme NVARCHAR(100), 
	@Lozinka NVARCHAR(100)
)
AS
BEGIN	
	INSERT INTO Klijenti
	SELECT @Ime, @Prezime, @Telefon, @Mail, @BrojRacuna, @KorisnickoIme, @Lozinka
END

EXEC proc_Upis @Ime = 'Ime', @Prezime = 'Prezime', @Telefon = '060000000', 
@Mail = 'ime.prezime@fit.ba', @BrojRacuna = '00000001', 
@KorisnickoIme = 'ime.prezime', @Lozinka = 'bestPassword'

/*5. Kreirati view sa sljedećom definicijom. Objekat treba da prikazuje datum transakcije, 
tip transakcije, ime i prezime pošiljaoca (spojeno), 
broj računa pošiljaoca, ime i prezime primaoca (spojeno), 
broj računa primaoca, svrhu i iznos transakcije.
10 bodova*/

CREATE VIEW v_Transakcije
AS
	SELECT T.Datum [Datum], T.TipTransakcije [TipTransakcije], K.Ime + ' ' + K.Prezime [Posiljalac],
		K.BrojRacuna [PosiljalacBrojRacuna], KL.Ime + ' ' + KL.Prezime [Primaoc], 
		KL.BrojRacuna [PrimaocBrojRacuna], T.Svrha [Svrha], T.Iznos [Iznos]
	FROM Transakcije T
	SELECT *
	FROM Transakcije T
	INNER JOIN Klijenti K
	ON T.PosaljilacID = K.KlijentID
	INNER JOIN Klijenti KL
	ON T.PrimalacID = KL.KlijentID

/*6. Kreirati uskladištenu proceduru koja će na osnovu unesenog broja 
računa pošiljaoca prikazivati sve transakcije
koje su provedene sa računa klijenta.
U proceduri koristiti prethodno kreirani view. 
Provjeriti ispravnost kreirane procedure.
10 bodova*/

CREATE PROCEDURE proc_Racun(
	@brojRacuna NVARCHAR(15)
)
AS
	BEGIN
		SELECT * 
		FROM v_Transakcije
		WHERE @brojRacuna = PosiljalacBrojRacuna
	END

EXEC proc_Racun @brojRacuna = 'AW00011000'

/*7. Kreirati upit koji prikazuje sumaran iznos svih transakcija po godinama, 
sortirano po godinama. U rezultatu upita
prikazati samo dvije kolone: kalendarska godina i ukupan iznos transakcija u godini.
10 bodova*/

SELECT YEAR(Datum) [KalendarskaGodina], SUM(Iznos) [UkupanIznos]
FROM Transakcije
GROUP BY YEAR(Datum)

/*8. Kreirati uskladištenu proceduru koje će vršiti brisanje klijenta uključujući 
sve njegove transakcije, bilo da je za
transakciju vezan kao pošiljalac ili kao primalac. 
Provjeriti ispravnost kreirane procedure.
10 bodova*/

CREATE PROCEDURE proc_Brisanje(
	@KlijentID INT
)
AS 
BEGIN
	DELETE FROM Transakcije 
	WHERE @KlijentID = PosaljilacID OR @KlijentID = PrimalacID

	DELETE FROM Klijenti
	WHERE @KlijentID = KlijentID

END

EXEC proc_Brisanje '1'


/*9. Kreirati uskladištenu proceduru koja će na osnovu unesenog broja računa ili 
prezimena pošiljaoca vršiti pretragu
nad prethodno kreiranim view-om (zadatak 5). 
Testirati ispravnost procedure u sljedećim situacijama:
a) Nije postavljena vrijednost niti jednom parametru (vraća sve zapise)
b) Postavljena je vrijednost parametra broj računa,
c) Postavljena je vrijednost parametra prezime,
d) Postavljene su vrijednosti oba parametra.
 20 bodova*/

ALTER PROCEDURE proc_Pretraga(
	@BrojRacuna NVARCHAR(15) = NULL,
	@Prezime NVARCHAR(30) = NULL
)
AS
BEGIN
	SELECT *
	FROM v_Transakcije
	WHERE @BrojRacuna = PosiljalacBrojRacuna OR @Prezime = SUBSTRING(Posiljalac, CHARINDEX(' ', Posiljalac) + 1, LEN(Posiljalac))
		OR (@BrojRacuna IS NULL AND @Prezime IS NULL)
END
/*a)*/
EXEC proc_Pretraga
/*b)*/
EXEC proc_Pretraga @BrojRacuna = 'AW00011001'
/*c)*/
EXEC proc_Pretraga @Prezime = 'Huang'
/*d)*/
EXEC proc_Pretraga @BrojRacuna = 'AW00011001', @Prezime = 'Huang'

/*10. Napraviti full i diferencijalni backup baze podataka na default lokaciju servera:
a) C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\Backup 5 bodova*/

BACKUP DATABASE BrojIndeksa
TO DISK = 'C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\Backup\BrojIndeksa.bak'


BACKUP DATABASE BrojIndeksa
TO DISK = 'C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\Backup\BrojIndeksa_diff.bak'
WITH DIFFERENTIAL
