
/*
1.	Kroz SQL kod, napraviti bazu podataka koja nosi ime vašeg broja dosijea. 
Fajlove baze podataka smjestiti na sljedeće lokacije:
a)	Data fajl: D:\BP2\Data
b)	Log fajl: D:\BP2\Log				
5 bodova
*/

CREATE DATABASE BrojIndeksa1
ON(
	NAME = 'BrojIndeksa1',
	FILENAME = 'D:\BP2\Data\BrojIndeksa1.mdf' 
)
LOG ON(
	NAME = 'BrojIndeksa1_log',
	FILENAME = 'D:\BP2\Log\BrojIndeksa1.ldf'
)

USE BrojIndeksa1
GO

/*2.	U svojoj bazi podataka kreirati tabele sa sljedećom strukturom:
a)	Proizvodi
i.	ProizvodID, cjelobrojna vrijednost i primarni ključ
ii.	Sifra, polje za unos 25 UNICODE karaktera (jedinstvena vrijednost i obavezan unos)
iii. Naziv, polje za unos 50 UNICODE karaktera (obavezan unos)
iv.	Kategorija, polje za unos 50 UNICODE karaktera (obavezan unos)
v.	Cijena, polje za unos decimalnog broja (obavezan unos)
b)	Narudzbe
i.	NarudzbaID, cjelobrojna vrijednost i primarni ključ,
ii.	BrojNarudzbe, polje za unos 25 UNICODE karaktera (jedinstvena vrijednost i obavezan unos)
iii.	Datum, polje za unos datuma (obavezan unos),
iv.	Ukupno, polje za unos decimalnog broja (obavezan unos)
c)	StavkeNarudzbe
i.	ProizvodID, cjelobrojna vrijednost i dio primarnog ključa,
ii.	NarudzbaID, cjelobrojna vrijednost i dio primarnog ključa,
iii.	Kolicina, cjelobrojna vrijednost (obavezan unos)
iv.	Cijena, polje za unos decimalnog broja (obavezan unos)
v.	Popust, polje za unos decimalnog broja (obavezan unos)
vi.	Iznos, polje za unos decimalnog broja (obavezan unos)
10 bodova
*/

CREATE TABLE Proizvodi(
	ProizvodID INT CONSTRAINT PK_Proizvodi PRIMARY KEY(ProizvodID),
	Sifra NVARCHAR(25) NOT NULL CONSTRAINT UQ_Sifra UNIQUE,
	Naziv NVARCHAR(50) NOT NULL,
	Kategorija NVARCHAR(50) NOT NULL,
	Cijena DECIMAL(18,2) NOT NULL
)

CREATE TABLE Narudzbe(
	NarudzbaID INT CONSTRAINT PK_Narudzbe PRIMARY KEY(NarudzbaID),
	BrojNarudzbe NVARCHAR(25) NOT NULL CONSTRAINT UQ_BrojNarudzbe UNIQUE,
	Datum DATE NOT NULL,
	Ukupno DECIMAL(18,2) NOT NULL
)
CREATE TABLE StavkeNarudzbe(
	ProizvodID INT NOT NULL CONSTRAINT FK_StavkeNarudzbe_Proizvodi FOREIGN KEY(ProizvodID)
	REFERENCES Proizvodi(ProizvodID),
	NarudzbaID INT NOT NULL CONSTRAINT FK_StavkeNarudzbe_Narudzbe FOREIGN KEY(NarudzbaID)
	REFERENCES Narudzbe(NarudzbaID),
	CONSTRAINT PK_StavkeNarudzbe PRIMARY KEY(ProizvodID, NarudzbaID),
	Kolicina INT NOT NULL,
	Cijena DECIMAL(18,2) NOT NULL,
	Popust DECIMAL(18,2) NOT NULL,
	Iznos DECIMAL(18,2) NOT NULL,
)

/*3.	Iz baze podataka AdventureWorks2014 u svoju bazu podataka prebaciti sljedeće podatke:
a)	U tabelu Proizvodi dodati sve proizvode koji su prodavani u 2014. godini
i.	ProductNumber -> Sifra
ii.	Name -> Naziv
iii.	ProductCategory (Name) -> Kategorija
iv.	ListPrice -> Cijena
b)	U tabelu Narudzbe dodati sve narudžbe obavljene u 2014. godini
i.	SalesOrderNumber -> BrojNarudzbe
ii.	OrderDate - > Datum
iii.	TotalDue -> Ukupno
c)	U tabelu StavkeNarudzbe prebaciti sve podatke o detaljima narudžbi urađenih u 2014. godini
i.	OrderQty -> Kolicina
ii.	UnitPrice -> Cijena
iii.	UnitPriceDiscount -> Popust
iv.	LineTotal -> Iznos 
Napomena: Zadržati identifikatore zapisa!		
20 bodova
*/

USE AdventureWorks2014
GO
/*a)*/
INSERT INTO BrojIndeksa1.dbo.Proizvodi (ProizvodID, Sifra, Naziv, Kategorija, Cijena)
SELECT DISTINCT P.ProductID, P.ProductNumber, P.Name,  PC.Name, P.ListPrice
FROM Production.Product P
INNER JOIN Production.ProductSubcategory PS
	ON P.ProductSubcategoryID = PS.ProductSubcategoryID
	INNER JOIN Production.ProductCategory PC
		ON PC.ProductCategoryID = PS.ProductCategoryID
		INNER JOIN Sales.SalesOrderDetail SOD
			ON P.ProductID = SOD.ProductID
			INNER JOIN Sales.SalesOrderHeader SOH 
				ON SOH.SalesOrderID = SOD.SalesOrderID
WHERE YEAR(SOH.OrderDate) = 2014

/*b)*/
INSERT INTO BrojIndeksa1.dbo.Narudzbe (NarudzbaID, BrojNarudzbe, Datum, Ukupno)
SELECT SOH.SalesOrderID, SOH.SalesOrderNumber, SOH.OrderDate, SOH.TotalDue
FROM Sales.SalesOrderHeader SOH
WHERE YEAR(SOH.OrderDate) = 2014

/*c)*/
INSERT INTO BrojIndeksa1.dbo.StavkeNarudzbe (ProizvodID, NarudzbaID, Kolicina, Cijena, Popust, Iznos)
SELECT SOD.ProductID, SOD.SalesOrderID, SOD.OrderQty, SOD.UnitPrice, SOD.UnitPriceDiscount, SOD.LineTotal
FROM Sales.SalesOrderDetail SOD
INNER JOIN Sales.SalesOrderHeader SOH
	ON SOD.SalesOrderID = SOH.SalesOrderID
WHERE YEAR(SOH.OrderDate)=2014

/*4. U svojoj bazi podataka kreirati novu tabelu Skladista sa poljima SkladisteID i Naziv, 
a zatim je povezati sa tabelom Proizvodi u relaciji više prema više. 
Za svaki proizvod na skladištu je potrebno čuvati količinu (cjelobrojna vrijednost).	 																				
5 bodova*/

USE BrojIndeksa1
GO

CREATE TABLE Skladista (
	SkladisteID INT CONSTRAINT PK_Skladista PRIMARY KEY(SkladisteID) IDENTITY(1,1), 
	Naziv NVARCHAR(50)
)

CREATE TABLE SkladistaProizvodi(
	SkladisteID INT CONSTRAINT FK_SkladistaProizvodi_Skladista FOREIGN KEY(SkladisteID)
	REFERENCES Skladista (SkladisteID),
	ProizvodID INT CONSTRAINT FK_SkladistaProizvodi_Proizvodi FOREIGN KEY(ProizvodID)
	REFERENCES Proizvodi(ProizvodID),
	Kolicina INT NOT NULL
)

/*5. U tabelu Skladista  dodati tri skladišta proizvoljno, 
a zatim za sve proizvode na svim skladištima postaviti količinu na 0 komada.
5 bodova*/

INSERT INTO Skladista (Naziv)
VALUES ('Zenica'),('Mostar'),('Sarajevo')


INSERT INTO SkladistaProizvodi
SELECT 1, ProizvodID, 0 
FROM Proizvodi
GO


INSERT INTO SkladistaProizvodi
SELECT 2, ProizvodID, 0 
FROM Proizvodi
GO

INSERT INTO SkladistaProizvodi
SELECT 3, ProizvodID, 0 
FROM Proizvodi
GO

/*6. Kreirati uskladištenu proceduru koja vrši izmjenu stanja skladišta (količina). 
Kao parametre proceduri proslijediti identifikatore proizvoda i skladišta, te količinu.						
10 bodova*/

CREATE PROCEDURE proc_StanjeSkladista(
	@skladisteID INT,
	@kolicina INT
)
AS
	BEGIN
		UPDATE SkladistaProizvodi
		SET Kolicina = @kolicina
		WHERE @skladisteID = SkladisteID
	END

EXEC proc_StanjeSkladista 1, 20

SELECT * FROM SkladistaProizvodi


/*7. Nad tabelom Proizvodi kreirati non-clustered indeks nad poljima Sifra i Naziv, 
a zatim napisati proizvoljni upit koji u potpunosti iskorištava kreirani indeks. 
Upit obavezno mora sadržavati filtriranje podataka.
5 bodova*/

CREATE NONCLUSTERED INDEX IX_Proizvodi 
ON Proizvodi (Sifra, Naziv)

SELECT Sifra, Naziv
FROM Proizvodi

/*8. Kreirati trigger koji će spriječiti brisanje zapisa u tabeli Proizvodi.	 			
5 bodova*/

CREATE TRIGGER tr_Brisanje ON Proizvodi
INSTEAD OF DELETE
AS
BEGIN
	PRINT 'Nije moguce obrisati podatke iz tabele'
	ROLLBACK 
END

DELETE FROM Proizvodi

/*9. Kreirati view koji prikazuje sljedeće kolone: šifru, naziv i cijenu proizvoda, 
ukupnu prodanu količinu i ukupnu zaradu od prodaje.									
10 bodova*/

CREATE VIEW vPrikazProizvoda
AS
	SELECT P.Sifra, P.Naziv, P.Cijena, SUM(SN.Kolicina) [Kolicina], SUM(SN.Iznos) [Ukupno]
	FROM Proizvodi P
	INNER JOIN StavkeNarudzbe SN
	ON P.ProizvodID = SN.ProizvodID
	GROUP BY P.Sifra, P.Naziv, P.Cijena

/*10. Kreirati uskladištenu proceduru koja će za unesenu šifru proizvoda 
prikazivati ukupnu prodanu količinu i ukupnu zaradu. 
Ukoliko se ne unese šifra proizvoda procedura treba da prikaže prodaju svih proizovda. 
U proceduri koristiti prethodno kreirani view.								
10 bodova*/

CREATE PROCEDURE proc_Pretraga (
 @sifra NVARCHAR(25) = NULL
 )
 AS 
	BEGIN
		SELECT SUM(SN.Kolicina) [UkupnaKolicina], SUM(SN.Iznos) [Ukupno]
		FROM Proizvodi P
		INNER JOIN StavkeNarudzbe SN
			ON P.ProizvodID = SN.ProizvodID
		WHERE @sifra = P.Sifra OR @sifra IS NULL
	END

EXEC proc_Pretraga

EXEC proc_Pretraga 'HL-U509-R'

/*11.	U svojoj bazi podataka kreirati novog korisnika za login student te mu dodijeliti
odgovarajuću permisiju kako bi mogao izvršavati prethodno kreiranu proceduru.
10 bodova*/

CREATE LOGIN student
WITH PASSWORD = 'JAKASIFRA'

CREATE USER korisnik FOR LOGIN student
GRANT EXECUTE ON dbo.proc_Pretraga TO korisnik

/*12.	Napraviti full i diferencijalni backup baze podataka na lokaciji D:\BP2\Backup	 														
5 bodova*/

BACKUP DATABASE BrojIndeksa1
TO DISK = 'D:\BP2\Backup\BrojIndeksa1.bak'


BACKUP DATABASE BrojIndeksa1
TO DISK = 'D:\BP2\Backup\BrojIndeksa1_diff.bak'
WITH DIFFERENTIAL
