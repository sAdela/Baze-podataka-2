/*ZADATAK
Unutar baze podataka BrojIndeksa kreirati tabelu Komisija sa sljedećim poljima:

•	Ime					polje za unos 30 karaktera (obavezan unos)
•	Prezime		polje za unos 30 karaktera (obavezan unos)
•	Titula			polje za unos 15 karaktera,
•	Telefon		polje za unos 20 karaktera,
•	Email			polje za unos 50 karaktera.

Tabelu kreirati bez primarnog ključa.*/

CREATE DATABASE BrojIndeksa


USE BrojIndeksa
GO
CREATE TABLE Komisija(
	Ime		NVARCHAR(30) NOT NULL,
	Prezime	NVARCHAR(30) NOT NULL, 
	Titula	NVARCHAR(15) NOT NULL,
	Telefon	NVARCHAR(15),
	Email	NVARCHAR(50)
)

/*ZADATAK
U tabelu Komisija importovati 10000 osoba iz tabela Person.Person,
Person.PersonPhone i Person.PersonEmailAddress baze podataka AdventureWorks2014.
Iz kolone PhoneNumber izdvojiti 7 znakova kao broj telefona.
NULL vrijednost u tabeli Person.Person zamijeniti vrijednošću nepoznat. 
Uključiti opciju aktuelni plan izvršenja kako bi se dobio prikaz plana izvršenja upita.*/

USE AdventureWorks2014

INSERT INTO BrojIndeksa.dbo.Komisija (Ime, Prezime, Titula, Telefon, Email)
SELECT TOP 10000 P.FirstName, P.LastName, ISNULL(P.Title, 'N/A'), LEFT(PP.PhoneNumber, 15), EA.EmailAddress
FROM Person.Person P 
INNER JOIN Person.PersonPhone PP
ON P.BusinessEntityID = PP.BusinessEntityID
INNER JOIN Person.EmailAddress EA
ON P.BusinessEntityID = EA.BusinessEntityID

/*ZADATAK
U tabelu Komisija dodati primarni ključ pod nazivom ClanKomisijeID (automatsko 
generiranje vrijednosti sa inkrementom 1), te provjeriti aktualni plan izvršenja.*/
USE BrojIndeksa
GO

ALTER TABLE Komisija
ADD ClanKomisijeID INT CONSTRAINT PK_ClanKomisijeID PRIMARY KEY(ClanKomisijeID) IDENTITY (1,1)

/*ZADATAK
Tabelu Komisija povezati sa tabelom Testovi many-to-many relacijom 
kreiranjem tabele PredmetneKomisije.

Tabela će se sastojati od polja: ImeClana, PrezimeClana, NazivTesta, OznakaTesta.
Primarni ključ kreirati kao kompozitni ključ sastavljen od ključeva iz tabela
Testovi i PredmetneKomisije. 

U kreiranu tabelu importovati podatke kod kojih je ID člana komisije jednak ID testa.*/

CREATE TABLE Testovi(
	TestID INT CONSTRAINT PK_Testovi PRIMARY KEY(TestID) IDENTITY(1,1),
	NazivTesta NVARCHAR(30)
)


CREATE TABLE PredmetneKomisije(
	TestID INT NOT NULL,
	ClanKomisijeID INT NOT NULL,
	ImeClana NVARCHAR (30) NOT NULL,
	PrezimeClana NVARCHAR (30) NOT NULL,
	NazivTesta NVARCHAR (50) NOT NULL,
	OznakaTesta NVARCHAR (10) NOT NULL,
	CONSTRAINT PK_PredmetneKomisije PRIMARY KEY(TestID, ClanKomisijeID),
	CONSTRAINT FK_PredmetneKomisije_Testovi FOREIGN KEY (TestID) REFERENCES Testovi(TestID),
	CONSTRAINT FK_PredmetneKomisije_Komisija FOREIGN KEY (ClanKomisijeID) REFERENCES Komisija (ClanKomisijeID)
)

/*U kreiranu tabelu importovati podatke kod kojih je ID člana komisije jednak ID testa.*/


INSERT INTO PredmetneKomisije 
		(ClanKomisijeID, TestID, ImeClana, PrezimeClana, NazivTesta, OznakaTesta)
SELECT K.ClanKomisijeID, T.TestID, K.Ime, K.Prezime, T.NazivTesta, T.OznakaTesta
FROM Komisija AS K INNER JOIN Testovi AS T
		ON K.ClanKomisijeID = T.TestID

/*ZADATAK
Kreirati prosti nonclustered indeks na polju telefon tabele Komisija
i insert upitom analizirati aktualni plan izvršenja.*/

CREATE NONCLUSTERED INDEX IX_Komisija
ON Komisija (Telefon ASC)

/*ZADATAK
Kreirati kompozitni nonclustered indeks sastavljen od kolona (polja)
ime i prezime i insert upitom testirati primjenu indeksa, 
provjeravajući aktualni plan izvršenja.*/

CREATE NONCLUSTERED INDEX IX_Kompozitni
ON Komisija (Prezime ASC, Ime ASC)


/*ZADATAK
Kreirati unique nonclustered indeks nad tabelom Komisija,
polje Email. Insert komandom testirati funkcionalnost prethodno kreiranog indeksa,
provjeravajući aktualni plan izvršenja.*/

CREATE UNIQUE NONCLUSTERED INDEX IX_UQ_Komisija
ON Komisija (Email DESC)

/*ZADATAK
U tabeli discount baze pubs izvršiti unos podataka stor_id. 
Za popust od 10.50 stor_id postaviti na 7067, a za 6.70 postaviti na 7131. 
Provjeriti aktuelni plan izvršenja.*/

USE pubs
GO

UPDATE discounts
SET stor_id = 7067
WHERE discount = 10.50

UPDATE discounts 
SET stor_id = 7131
WHERE discount = 6.70

/*ZADATAK
Kreirati upit koji će iz tabela discounts, sales, stores i titles baze pubs na 
osnovu informacije o visini popusta (discount) prikazati sljedeća polja: 
tip popusta, naziv trgovine, grad, datum narudžbe, količinu, naziv djela i 
književni žanr djela - tip. Popust je veći od 5. 
Rezultat sortirati po književnom žanru. Evidentirati aktuelni plan izvršenja.*/

USE pubs
GO

SELECT D.discounttype, S.stor_name, S.city, SA.ord_date, SA.qty, T.title, T.type
FROM discounts D INNER JOIN stores S
ON D.stor_id = S.stor_id
INNER JOIN sales SA ON SA.stor_id = S.stor_id
INNER JOIN titles T ON SA.title_id = T.title_id
WHERE D.discount > 5 
ORDER BY T.type


/*ZADATAK
Kreirati upit koji će iz tabela discounts, sales, stores i titles baze pubs 
na osnovu informacije o visini popusta (discount) prikazati sljedeća polja: 
tip popusta, naziv trgovine, grad, datum narudžbe, količinu, naziv djela i književni žanr 
djela - tip. Popust je manji ili jednak od 5. 
Rezultat sortirati po književnom žanru. Evidentirati aktuelni plan izvršenja.*/


SELECT D.discounttype, S.stor_name, S.city, SA.ord_date, SA.qty, T.title, T.type
FROM discounts D INNER JOIN stores S
ON D.stor_id = S.stor_id
INNER JOIN sales SA ON SA.stor_id = S.stor_id
INNER JOIN titles T ON SA.title_id = T.title_id
WHERE D.discount <= 5
ORDER BY T.type

/*ZADATAK
Nad bazom podataka Northwind kreirati 5 složenijih upita primjenom različitih elemenata 
SELECT komande. Uključiti prikaz plana izvršenja i analizirati komentare. 
Primjenom alata SQL Server Profiler kreirati novi trace, 
izvršiti kreirane upite te dobiveni rezultat sačuvati.	
Iz tabela Customers i Orders u bazi Northwind za narudžbe izvršene u 1997. 
godini prikazati ime naručitelja (kupca) i ukupnu vrijednost troška prevoza po naručitelju.*/

USE NORTHWND
GO

SELECT C.ContactName, SUM(O.Freight) [CijenaPrijevoza]
FROM Customers AS C INNER JOIN Orders AS O
ON C.CustomerID = O.CustomerID
WHERE YEAR(O.OrderDate) = 1997 
GROUP BY C.ContactName
ORDER BY C.ContactName

/*Iz tabela Employees, EmployeeTerritories, Territories i Region baze Northwind 
prikazati prezime i ime uposlenika kao polje ime i prezime, teritoriju i regiju
koju pokrivaju i stariji su od 30 godina.*/

SELECT YEAR(GETDATE()) - YEAR(E.BirthDate) [Godine], E.LastName + ' ' + E.FirstName [Ime i Prezime], T.TerritoryDescription, R.RegionDescription
FROM Employees E INNER JOIN EmployeeTerritories ET
ON E.EmployeeID = ET.EmployeeID 
INNER JOIN Territories T
ON ET.TerritoryID = T.TerritoryID
INNER JOIN Region R
ON T.RegionID = R.RegionID
WHERE YEAR(GETDATE()) - YEAR(E.BirthDate) > 30

/*Iz tabela Employee, Order Details i Orders baze Northwind prikazati ime i prezime
uposlenika kao polje ime i prezime, jediničnu cijenu, količinu i ukupnu vrijednost 
pojedinačne narudžbe kao polje ukupno za sve narudžbe u 1997. godini, 
pri čemu će se rezultati sortirati prema novokreiranom polju ukupno.*/


SELECT E.LastName + ' ' + E.FirstName [Ime i Prezime], OD.UnitPrice, OD.Quantity,
	(OD.UnitPrice - OD.UnitPrice * OD.Discount) * OD.Quantity [UkupnaCijena], OD.Discount
FROM Employees E INNER JOIN Orders O
ON E.EmployeeID = O.EmployeeID 
INNER JOIN [Order Details] OD
ON O.OrderID = OD.OrderID
WHERE YEAR(O.OrderDate) = 1997
ORDER BY 4

/*Iz tabela Employee, Order Details i Orders baze Northwind prikazati ime uposlenika
i ukupnu vrijednost svih narudžbi koje je taj uposlenik napravio u 1996.
godini ako je ukupna vrijednost veća od 1000, 
pri čemu će se rezultati sortirati uzlaznim redoslijedom prema polju ime. 
Vrijednost sume zaokružiti na dvije decimale.*/

SELECT E.FirstName, SUM(ROUND( (OD.UnitPrice - OD.UnitPrice * OD.Discount) * OD.Quantity, 2)) [UkupnaSuma]
FROM Employees E INNER JOIN Orders O
ON E.EmployeeID = O.EmployeeID 
INNER JOIN [Order Details] OD
ON O.OrderID = OD.OrderID
WHERE YEAR(O.OrderDate) = 1996
GROUP BY E.FirstName
HAVING SUM((OD.UnitPrice - OD.UnitPrice * OD.Discount) * OD.Quantity) > 1000
ORDER BY 1

/*Iz tabela Categories, Products i Suppliers baze Northwind prikazati naziv isporučitelja 
(dobavljača), mjesto i državu isporučitelja (dobavljača) i naziv(e) proizvoda 
iz kategorije napitaka (pića) kojih na stanju ima više od 30 jedinica. 
Rezultat upita sortirati po državi.*/

SELECT S.CompanyName, S.City, S.Country, P.ProductName
FROM Categories C 
INNER JOIN Products P
ON C.CategoryID = P.CategoryID 
INNER JOIN Suppliers S
ON S.SupplierID = P.SupplierID
WHERE C.CategoryID = 1 AND P.UnitsInStock > 30 
ORDER BY 3 
